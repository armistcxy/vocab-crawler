package main

import (
	"fmt"
	"log"
	"log/slog"

	"github.com/gocolly/colly"
)

func init() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
}

func getSeed() []string {
	seeds := make([]string, 27)
	seeds[0] = "0-9"
	for i := 1; i <= 26; i++ {
		seeds[i] = string(byte('a' + i - 1))
	}
	return seeds
}

const baseURL = "https://dictionary.cambridge.org/browse/english/"

type URL string

// Each character has vocabs devided by range
// Return url to those indexes for each character
func ExtractIndex(ch string) <-chan URL {
	url := baseURL + ch
	slog.Info("Extract indexes", "url", url)
	c := colly.NewCollector()
	c.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
	indexes := make(chan URL)

	var link string
	indexSelector := ".hlh32.hdb.dil.tcbd"
	c.OnHTML(indexSelector, func(e *colly.HTMLElement) {
		link = e.Attr("href")
		indexes <- URL(link)
	})

	c.OnError(func(_ *colly.Response, err error) {
		slog.Error(err.Error())
	})

	go func() {
		if err := c.Visit(url); err != nil {
			slog.Error(err.Error())
		}
		close(indexes)
	}()

	return indexes
}

func main() {
	seeds := getSeed()

	urls := ExtractIndex(seeds[0])

	for url := range urls {
		fmt.Println(url)
	}

}

type Vocab struct {
	Word         string
	Define       string
	Level        string `json:"level,omitempty"`
	ExampleUsage string `json:"example_usage,omitempty"`
}
